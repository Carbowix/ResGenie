// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

enum userStatus {
  ONLINE
  OFFLINE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String @id @default(cuid())
  username String @unique
  password String

  accounts Account[]
  sessions Session[]
  resumes  Resume[]  @relation("userResumes")
}

model Resume {
  id             String           @id @default(cuid())
  title          String
  birthday       String?
  email          String?
  phoneNumber    String?
  location       String?
  objective      String?          @default("")
  userId         String
  user           User             @relation("userResumes", fields: [userId], references: [id])
  education      Education[]
  workExperience WorkExperience[]
  skills         Skill[]
  certifications Certification[]
  projects       Project[]
  isPublic       Boolean
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  profileLinks   ProfileLink[]
}

model ProfileLink {
  id       Int    @id @default(autoincrement())
  link     String
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])
}

model Education {
  id         Int    @id @default(autoincrement())
  school     String
  degree     String
  graduation String
  resumeId   String
  resume     Resume @relation(fields: [resumeId], references: [id])
}

model WorkExperience {
  id               Int    @id @default(autoincrement())
  company          String
  position         String
  startDate        String
  endDate          String
  responsibilities String
  resumeId         String
  resume           Resume @relation(fields: [resumeId], references: [id])
}

model Skill {
  id       Int    @id @default(autoincrement())
  header   String
  skills   String
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])
}

model Certification {
  id               Int    @id @default(autoincrement())
  name             String
  issuingAuthority String
  date             String
  resumeId         String
  resume           Resume @relation(fields: [resumeId], references: [id])
}

model Project {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  startDate   String
  endDate     String
  resumeId    String
  resume      Resume @relation(fields: [resumeId], references: [id])
}
